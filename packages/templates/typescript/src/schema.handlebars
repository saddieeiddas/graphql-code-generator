{{#ifCond @root.config.resolvers "!==" false}}
{{#if types}}
import { GraphQLResolveInfo } from 'graphql';

export type Resolver<Result, Parent = any, Context = any, Args = any> = (
  parent?: Parent,
  args?: Args,
  context?: Context,
  info?: GraphQLResolveInfo
) => Promise<Result> | Result;

export type SubscriptionResolver<Result, Parent = any, Context = any, Args = any> = {
  subscribe<R = Result, P = Parent>(
    parent?: P,
    args?: Args,
    context?: Context,
    info?: GraphQLResolveInfo
  ): AsyncIterator<R | Result>;
  resolve?<R = Result, P = Parent>(
    parent?: P,
    args?: Args,
    context?: Context,
    info?: GraphQLResolveInfo
  ): R | Result | Promise<R | Result>;
}

{{/if}}
{{/ifCond}}
{{#if @root.config.schemaNamespace ~}}export namespace {{@root.config.schemaNamespace}} { {{/if}}
{{#each scalars}}

{{ toComment description }}
{{#ifCond (toPascalCase name) "!==" (getScalarType name) }}export type {{ name }} = {{ getScalarType name }};{{/ifCond}}
{{/each}}
{{#each interfaces}}
  {{~> type }}

{{/each}}
{{#each types}}
  {{~> type }}

{{/each}}
{{#each inputTypes}}
  {{~> type }}

{{/each}}
{{~#each types}}
  {{~#each fields}}
    {{~# if hasArguments }}
export interface {{ toPascalCase name }}{{ name }}Args {
{{#each arguments}}
  {{ name }}{{ getOptionals this }}: {{ convertedType this }}; {{ toComment description }}
{{/each}}
}
    {{/if}}
  {{/each}}
{{/each}}
{{#each enums}}
  {{~> enum }}
{{/each}}
{{#each unions}}
{{ toComment description }}
export type {{ name }} = {{#each possibleTypes}}{{ toPascalCase this}}{{#unless @last}} | {{/unless}}{{/each}};

{{/each}}
{{#if @root.config.schemaNamespace ~}} } {{~/if}}
{{#ifCond @root.config.resolvers "!==" false }}
{{#each types}}
{{~> resolver }}
{{/each}}
{{/ifCond}}
